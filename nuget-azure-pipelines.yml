strategy:
  matrix:
    Windows-VS2019:
      imageName: 'vs2017-win2016'
      netcore_sdk: 3.1.201
      rustup_toolchain: nightly-2020-01-07
    Osx-Mojave:
      imageName: 'macos-10.14'
      netcore_sdk: 3.1.201
      rustup_toolchain: nightly-2020-01-07
    Ubuntu-1804:
      imageName: 'ubuntu-18.04'
      netcore_sdk: 3.1.201
      rustup_toolchain: nightly-2020-01-07
  maxParallel: 3

pool:
  vmImage: $(imageName)

steps:
  - task: DotNetCoreInstaller@0
    displayName: 'Install .NetCore SDK'
    inputs:
      version: 3.1.201
      failOnStandardError: 'true'
  - script: cargo build --manifest-path packages/catalyst-ffi/Cargo.toml --verbose
    displayName: Cargo build 
  - script: cargo test --manifest-path packages/catalyst-ffi/Cargo.toml --verbose
    displayName: Cargo test 
  - task: CopyFiles@2
    displayName: copy windows runtime
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    inputs:
      SourceFolder: './packages/catalyst-ffi/target/debug'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/runtimes/win-x64/native'
      Contents: 'catalyst_ffi.*'
  - task: CopyFiles@2
    displayName: copy macos runtime
    condition: eq( variables['Agent.OS'], 'Darwin' )
    inputs:
      SourceFolder: './packages/catalyst-ffi/target/debug'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/runtimes/osx-x64/native'
      Contents: 'libcatalyst_ffi.*'
  - task: CopyFiles@2
    displayName: copy linux runtime
    condition: eq( variables['Agent.OS'], 'Linux' )
    inputs:
      SourceFolder: './packages/catalyst-ffi/target/debug'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/runtimes/linux-x64/native'
      Contents: 'libcatalyst_ffi.*'
  - task: CopyFiles@2
    displayName: copy Licence and csproj for nuget packaging
    inputs:
      SourceFolder: '.'
      Contents: '?(*.csproj|LICENSE)'
      TargetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: DotNetCoreCLI@2
    displayName: dotnet restore
    inputs:
      command: restore
      projects: '$(Build.ArtifactStagingDirectory)/*.csproj'
  - task: DotNetCoreCLI@2
    displayName: Pack
    inputs:
      command: pack
      packDirectory: '$(Build.ArtifactStagingDirectory)/nuget'
      projects: '$(Build.ArtifactStagingDirectory)/*.csproj'
      nobuild: true
      includesymbols: false
      includesource: false
      verbosityPack: 'Diagnostic'
      failOnStandardError: 'true'
    condition: succeeded()
  - task: PublishBuildArtifacts@1
    displayName: Publish Artifacts
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/nuget'
      ArtifactName: nuget-artifact